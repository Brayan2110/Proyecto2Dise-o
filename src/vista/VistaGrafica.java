/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.io.File;
import java.io.FileInputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import modelo.Motor;
import modelo.SimuladorSingleton;
import modelo.vista;

/**
 *
 * @author Bvarg
 */
public class VistaGrafica extends javax.swing.JFrame implements vista, Runnable{

    /**
     * Creates new form VistaGrafica
     */
    SimuladorSingleton simuladorSingleton;
    DefaultTableModel modelo;
    DefaultTableModel modelo2;
    DefaultTableModel modelo3;
    DefaultTableModel modelo4;
    public VistaGrafica() {
        try{
            initComponents();
            setExtendedState(this.MAXIMIZED_BOTH);
            setResizable(false);
            jMenuItem2.setEnabled(false);
            simuladorSingleton = SimuladorSingleton.getInstance();
            modelo = new DefaultTableModel();
            modelo.addColumn("Numero de Elevador");
            modelo.addColumn("Piso Actual");
            modelo.addColumn("Direccion Actual");
            modelo.addColumn("Direccion Prevista");
            modelo.addColumn("Cantidad de Personas");
            modelo.addColumn("Solicitud");
            this.jTable1.setModel(modelo);

            modelo2 = new DefaultTableModel();
            modelo2.addColumn("Numero Piso");
            modelo2.addColumn("Cantidad de personas");
            this.jTable2.setModel(modelo2);

            modelo3 = new DefaultTableModel();
            modelo3.addColumn("Caracteristica");
            modelo3.addColumn("Valor");
            this.jTable3.setModel(modelo3);
            
            modelo4 = new DefaultTableModel();
            modelo4.addColumn("Estado");
            this.jTable4.setModel(modelo4);
        }
        catch(Exception e){
            System.out.println("Error al cargar");
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenuBar5 = new javax.swing.JMenuBar();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu2.setText("File");
        jMenuBar2.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("File");
        jMenuBar3.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("File");
        jMenuBar4.add(jMenu6);

        jMenu7.setText("Edit");
        jMenuBar4.add(jMenu7);

        jMenu8.setText("File");
        jMenuBar5.add(jMenu8);

        jMenu9.setText("Edit");
        jMenuBar5.add(jMenu9);

        jMenu10.setText("jMenu10");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jButton1.setText("Modo Manual");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable2.setEnabled(false);
        jScrollPane2.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable4.setEnabled(false);
        jScrollPane4.setViewportView(jTable4);

        jButton2.setText("Modo Automatico");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jMenu1.setText("Archivo");
        jMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu1MenuSelected(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Cargar Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar Archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 203, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Motor.esperar = true;
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(VistaGrafica.class.getName()).log(Level.SEVERE, null, ex);
        }
        Motor.esperar = false;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        SimuladorSingleton simulador = SimuladorSingleton.getInstance();
        simulador.setUT(Integer.parseInt(jSpinner1.getValue().toString()));
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Motor.esperar = true;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        cargarArchivo();
        jMenuItem1.setEnabled(false);
        jMenuItem2.setEnabled(true);
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu1MenuSelected
        //cargarArchivo();
    }//GEN-LAST:event_jMenu1MenuSelected

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        cargarArchivo();
        jMenuItem1.setEnabled(false);
        jMenuItem2.setEnabled(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        guardarArchivo();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaGrafica().setVisible(true);
            }
        });
    }
    
    public void cargarArchivo() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\Bvarg\\Documents\\NetBeansProjects\\JavaApplication3\\src\\Archivos"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("TXT & JSON & XML", "txt", "json", "xml"));
        int returnVal = fileChooser.showDialog(jMenu1, "Cargar");
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            SimuladorSingleton simulador = SimuladorSingleton.getInstance();
            simulador.cargar(selectedFile.getAbsolutePath());
            simulador.start();
            jSpinner1.setValue(2);
            desplegarInformaciondeParametros();
            desplegarInformaciondeElevadores();
        }
       
    }
    
    public void guardarArchivo(){
        simuladorSingleton.getDatosSimulacion().setCantidadPersonas(Integer.parseInt(String.valueOf(modelo3.getValueAt(0, 1))));
        simuladorSingleton.getDatosSimulacion().setCantidadDePisos(Integer.parseInt(String.valueOf(modelo3.getValueAt(1, 1))));
        simuladorSingleton.getDatosSimulacion().setCantidadDeElevadores(Integer.parseInt(String.valueOf(modelo3.getValueAt(2, 1))));
        simuladorSingleton.getDatosSimulacion().setProbBotonEmergencia(Float.parseFloat(String.valueOf(modelo3.getValueAt(3, 1))));
        simuladorSingleton.getDatosSimulacion().setTiempoEntrepiso(Integer.parseInt(String.valueOf(modelo3.getValueAt(4, 1))));
        simuladorSingleton.getDatosSimulacion().setTiempoPuertaAbierta(Integer.parseInt(String.valueOf(modelo3.getValueAt(5, 1))));
        simuladorSingleton.getDatosSimulacion().setTiempoPuertaAbiertaBotonDetenerse(Integer.parseInt(String.valueOf(modelo3.getValueAt(6, 1))));
 
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\Bvarg\\Documents\\NetBeansProjects\\JavaApplication3\\src\\Archivos"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("TXT & JSON & XML", "txt", "json", "xml"));
        if(fileChooser.showDialog(jMenu1, "Guardar")==JFileChooser.APPROVE_OPTION){
            File selectedFile = fileChooser.getSelectedFile();
            SimuladorSingleton simulador = SimuladorSingleton.getInstance();
            String respuesta = simulador.guardar(selectedFile.getAbsolutePath());
            JOptionPane.showMessageDialog(null, respuesta);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuBar jMenuBar5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void desplegarInformaciondeParametros() {
        try{
            String[] datos = new String[2];
            datos[0] = "Cantidad de Personas";
            datos[1] = String.valueOf(simuladorSingleton.getDatosSimulacion().getCantidadPersonas());
            modelo3.addRow(datos);
            datos = new String[2];
            datos[0] = "Cantidad de pisos";
            datos[1] = String.valueOf(simuladorSingleton.getDatosSimulacion().getCantidadDePisos());
            modelo3.addRow(datos);
            datos = new String[2];
            datos[0] = "Cantidad de Elevadores";
            datos[1] = String.valueOf(simuladorSingleton.getDatosSimulacion().getCantidadDeElevadores());
            modelo3.addRow(datos);
            datos = new String[2];
            datos[0] = "Prob boton Emergencia";
            datos[1] = String.valueOf(simuladorSingleton.getDatosSimulacion().getProbBotonEmergencia());
            modelo3.addRow(datos);
            datos = new String[2];
            datos[0] = "Tiempo entre piso";
            datos[1] = String.valueOf(simuladorSingleton.getDatosSimulacion().getTiempoEntrepiso());
            modelo3.addRow(datos);
            datos = new String[2];
            datos[0] = "Tiempo puerta abierta";
            datos[1] = String.valueOf(simuladorSingleton.getDatosSimulacion().getTiempoPuertaAbierta());
            modelo3.addRow(datos);
            datos = new String[2];
            datos[0] = "Tiempo boton puerta abierta";
            datos[1] = String.valueOf(simuladorSingleton.getDatosSimulacion().getTiempoPuertaAbierta());
            modelo3.addRow(datos);
        }
        catch(Exception e){
            System.out.println("Error al abrir");
        }
        //HashMap<String,Float> probSolicitarElevadorEnUnPiso = new HashMap<>();
        //HashMap<String,Float> probEscogerPisoComoDestino = new HashMap<>();
        //HashMap<String,Float> probBotonDetenerse = new HashMap<>();
    }

    @Override
    public void cambiarVelocidad() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void iniciarModoAutomatico() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void iniciarModoPasoaPaso() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void obtenerArchivodeCarga() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void guardarArchivodeCarga() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void desplegarInformaciondeElevadores() {
        start();
    }

    @Override
    public void run() {
        while(true){
            try{
                for(int i = 0; i<simuladorSingleton.getControlador().getElevadores().size(); i++){
                    String[] datos = new String[6];
                    datos[0] = String.valueOf(simuladorSingleton.getControlador().getElevadores().get(i).getNumeroElevador());
                    datos[1] = String.valueOf(simuladorSingleton.getControlador().getElevadores().get(i).getPiso());
                    datos[2] = String.valueOf(simuladorSingleton.getControlador().getElevadores().get(i).getDireccionActual());
                    datos[3] = String.valueOf(simuladorSingleton.getControlador().getElevadores().get(i).getDireccionPrevista());
                    datos[4] = String.valueOf(simuladorSingleton.getControlador().getElevadores().get(i).getCantPersonas());
                    if(!simuladorSingleton.getControlador().getElevadores().get(i).getSolicitud().isEmpty()){
                        datos[5] = String.valueOf(simuladorSingleton.getControlador().getElevadores().get(i).getSolicitud().get(0));
                    }
                    else{
                        datos[5] = "Ninguna";
                    }
                    modelo.addRow(datos);
                    datos = new String[1];
                    datos[0] = simuladorSingleton.getControlador().getElevadores().get(i).getEstado();
                    modelo4.addRow(datos);
                }
                for(int i = 0; i<simuladorSingleton.getPersonas().length; i++){
                    String[] datos = new String[2];
                    datos[0] = String.valueOf(i+1);
                    datos[1] = String.valueOf(simuladorSingleton.getPersonas()[i]);
                    modelo2.addRow(datos);
                }
                try {
                    Thread.sleep(700);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                modelo = new DefaultTableModel();
                modelo.addColumn("Numero de Elevador");
                modelo.addColumn("Piso Actual");
                modelo.addColumn("Direccion Actual");
                modelo.addColumn("Direccion Prevista");
                modelo.addColumn("Cantidad de Personas");
                modelo.addColumn("Solicitud");
                this.jTable1.setModel(modelo);
                
                modelo4 = new DefaultTableModel();
                modelo4.addColumn("Estado");
                this.jTable4.setModel(modelo4);
                
                modelo2 = new DefaultTableModel();
                modelo2.addColumn("Numero Piso");
                modelo2.addColumn("Cantidad de personas");
                this.jTable2.setModel(modelo2);
            }
            catch(Exception e){
            }
        }
    }

    public void start(){
        new Thread(this).start();
    }
}
